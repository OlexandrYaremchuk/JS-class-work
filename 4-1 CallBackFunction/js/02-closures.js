/*
 * –§—É–Ω–∫—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—Ç–æ–º —Å–≤–æ—î—ó —Ä–æ–±–æ—Ç–∏ –º–æ–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é.
 *
 * –ü–æ–≤–µ—Ä–Ω—É—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É –±—É–¥–µ –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω (–æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ)
 * –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó —Ñ—É–Ω–∫—Ü–∏—ñ (—Ç–æ—ó –∑ —è–∫–æ—ó —ó—ó –ø–æ–≤–µ—Ä–Ω—É–ª–∏),
 * —Ü–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è "–∑–∞–º–∏–∫–∞–Ω–Ω—è".
 */

const fnA = function (parameter) {
    const innerVariable = '–∑–Ω–∞—á–µ–Ω–Ω—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó –∑–º—ñ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó fnA';

    const innerFunction = function () {
        console.log(parameter);
        console.log(innerVariable);
        console.log('–¶–µ –≤–∏–∫–ª–∏–∫  innerFunction');
    };

    return innerFunction;
};

// const fnB = fnA(555);

// fnB();

// console.log(fnB);

/*
 * –ü–æ–≤–∞—Ä
 */
// const makeDish = function (sheffName, dish) {
//     console.log(`${sheffName} –≥–æ—Ç—É—î ${dish}`);
// };

// makeDish('Mango', '–ø–∏—Ä—ñ–≥');
// makeDish('Mango', '–æ–º–ª–µ—Ç');
// makeDish('Mango', '—á–∞–π');

// makeDish('Poly', '–∫–æ—Ç–ª–µ—Ç–∏');
// makeDish('Poly', '—Å—É–ø');
// makeDish('Poly', '–∫–∞–≤—É');

const makeSheff = function (name) {
    const innverVar = 555;
    const message = 'hello';

    const makeDish = function (dish) {
        console.log(message);
        console.log(innverVar);
        console.log(`${name} –≥–æ—Ç—É—î ${dish}`);
    };

    return makeDish;
};

// const mango = makeSheff('Mango');

// console.dir(mango);

// mango('–∫–æ—Ç–ª–µ—Ç–∏');
// mango('–ø–∏—Ä—ñ–≥');

// const poly = makeSheff('Poly');

// console.dir(poly); //–º–æ–∂–µ–º –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –Ω–∞ —á–æ–º—É –∑–∞–º–∫–Ω—É–ª–∞—Å—å —Ñ—É–Ω–∫—Ü—ñ—è

// poly('—á–∞–π');
// poly('–æ–º–ª–µ—Ç');

// console.dir(mango); //–º–æ–∂–µ–º –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –Ω–∞ —á–æ–º—É –∑–∞–º–∫–Ω—É–ª–∞—Å—å —Ñ—É–Ω–∫—Ü—ñ—è

//*! –¶–µ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—è. –©–æ–¥–Ω—è —é–∑–∞—Ç–∏ –≤–∏ —ó—ó –Ω–µ –±—É–¥–µ—Ç–µ –∞–ª–µ —Ä–æ–∑—É–º—ñ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ. –°–∞–º–µ –≥–æ–ª–æ–≤–Ω–µ, —è–∫—â–æ –∑ —è–∫–æ—ó—Å—å —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç–µ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é, —Ç–æ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫–æ–≤—ñ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–≤–æ—î—ó –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó

/*
 * –û–∫—Ä—É–≥–ª—è—Ç–æ—Ä ü§∑‚Äç‚ôÇÔ∏è
 */

// const floatingPoint = 3.456789;
// const someInt = Math.round(floatingPoint); // 3
// const withDecimals = Number(floatingPoint.toFixed(2)); // 3.46

// const rounder = function (number, places) {
//     return Number(number.toFixed(places));
// };

// console.log(rounder(3.4567, 2));
// console.log(rounder(3.4567, 3));
// console.log(rounder(5.1234, 2));
// console.log(rounder(3.4567, 3));

const rounder = function (places) {
    return function (number) {
        return Number(number.toFixed(places));
    };
};

// const rounder2 = rounder(2);
// const rounder3 = rounder(3);

// console.dir(rounder2);
// console.dir(rounder3);

// console.log(rounder2(3.4567));
// console.log(rounder2(5.4512312312367));
// console.log(rounder3(3.4567));
// console.log(rounder2(5.1234));
// console.log(rounder3(3.4567));
// console.log(rounder3(10.67667));

/*
 * –ü—Ä–∏–≤–∞—Ç–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó - –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

const salaryManagerFactory = function (employeeName, baseSalary = 0) {
    let salary = baseSalary;

    return {
        raise(amount) {
            if (amount > 1000) {
                return '–¢–∏ –∑ –¥—É–±–∞ –≤–ø–∞–≤?';
            }

            salary += amount;
        },
        lower(amount) {
            salary -= amount;
        },
        current() {
            return `–§–∞–∫—Ç–∏—á–Ω–∞ –∑–∞—Ä–ø–∞–ª–∞—Ç–∞ ${employeeName} - ${salary}`;
        },
    };
};

const salaryManager = salaryManagerFactory('Mango', 5000);

console.log(salaryManager.current());

console.log(salaryManager.raise(10000000));

console.log(salaryManager.current());

// const myLibFactory = function () {
//     let value = 0;

//     const add = function (num) {
//         value += num;
//     };

//     return {
//         add: add,
//         getValue() {
//             return value;
//         },
//     };
// };

// const myLib = myLibFactory();

// console.dir(myLib.getValue);

// console.log(myLib);
// console.log(myLib.getValue());
// myLib.add(10);
// console.log(myLib.getValue());
